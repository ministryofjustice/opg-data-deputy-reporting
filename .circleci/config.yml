---
version: 2.1

parameters:
  run_pull_request:
    type: boolean
    default: true
  run_commit_to_main:
    type: boolean
    default: true
  run_verify_pact:
    type: boolean
    default: true
  consumerversion:
    type: string
    default: ""

workflows:
#  pull_request:
#    when: << pipeline.parameters.run_pull_request >>
#    jobs:
#      - build_lambda:
#          name: build and artifact
#          filters: {branches:{ignore:[main]}}
#      - terraform_pre_checks:
#          name: terraform branch preflight checks
#          requires: [build and artifact]
#          filters: {branches:{ignore:[main]}}
#      - terraform_action:
#          name: plan branch environment
#          requires: [terraform branch preflight checks]
#          tf_command: plan
#          filters: {branches:{ignore:[main]}}
#      - terraform_action:
#          name: apply branch environment sirius mock
#          requires: [plan branch environment]
#          tf_command: apply
#          mock_sirius: "1"
#          filters: {branches:{ignore:[main]}}
#      - integration_tests:
#          name: run integration tests
#          requires: [apply branch environment sirius mock]
#          filters: {branches:{ignore:[main]}}
#      - terraform_action:
#          name: apply branch environment
#          requires: [run integration tests]
#          tf_command: apply
#          filters: {branches:{ignore:[main]}}
#      - workspace_protection:
#          name: protect current workspace
#          requires: [plan branch environment]
#          filters: {branches:{ignore:[main]}}
#      - workflow_complete:
#          name: workflow complete
#          requires: [apply branch environment, protect current workspace]
#          filters: {branches:{ignore:[main]}}
  commit_to_main:
    when: << pipeline.parameters.run_commit_to_main >>
    jobs:
      - build_lambda:
          name: build and artifact
          filters: {branches:{only:[main]}}
      - terraform_pre_checks:
          name: terraform dev preflight checks
          requires: [build and artifact]
          tf_workspace: development
          filters: {branches:{only:[main]}}
      - terraform_action:
          name: development apply
          requires: [terraform dev preflight checks]
          tf_command: apply --auto-approve
          tf_workspace: development
          filters: {branches:{only:[main]}}
      - terraform_pre_checks:
         name: terraform preprod preflight checks
         requires: [build and artifact]
         tf_workspace: preproduction
         filters: {branches:{only:[main]}}
      - terraform_action:
         name: preprod apply
         requires: [terraform preprod preflight checks, development apply]
         tf_command: apply --auto-approve
         tf_workspace: preproduction
         filters: {branches:{only:[main]}}
      - approve:
         name: approve release to production
         type: approval
         requires: [preprod apply]
         filters: {branches:{only:[main]}}
      - terraform_pre_checks:
         name: terraform production preflight checks
         requires: [approve release to production]
         tf_workspace: production
         filters: {branches:{only:[main]}}
      - terraform_action:
         name: production apply
         requires: [terraform production preflight checks]
         tf_command: apply --auto-approve
         tf_workspace: production
         pact_tag_production: true
         filters: {branches:{only:[main]}}
#  verify_pact:
#    when: << pipeline.parameters.run_verify_pact >>
#    jobs:
#      - pact_verification:
#          name: verify the latest pact
  nightly_workspace_deletion:
    triggers:
      - schedule:
          cron: "00 00 * * *"
          filters: {branches:{only:[main]}}
    jobs:
      - destroy_workspaces:
          name: destroy non protected workspaces
          filters: {branches:{only:[main]}}
orbs:
  aws-cli: circleci/aws-cli@1.3.0
  slack: circleci/slack@3.4.2
  dockerhub_helper:
    orbs:
      docker: circleci/docker@1.4.0
    commands:
      dockerhub_login:
        steps:
          - docker/install-docker-credential-helper
          - docker/check:
              docker-password: DOCKER_ACCESS_TOKEN
              docker-username: DOCKER_USER
  digideps-data:
    executors:
      python_with_tfvars:
        docker:
          - image: cimg/python:3.9.12
            auth:
              username: $DOCKER_USER
              password: $DOCKER_ACCESS_TOKEN
        resource_class: small
        environment:
          TF_VERSION: 1.2.1
          TF_SHA256SUM: 8cf8eb7ed2d95a4213fbfd0459ab303f890e79220196d1c4aae9ecf22547302e
          TF_CLI_ARGS_plan: -input=false -lock=false
          TF_CLI_ARGS_apply: -input=false -auto-approve
          TF_CLI_ARGS_destroy: -input=false -auto-approve
          TF_CLI_ARGS_init: -input=false -upgrade=true -reconfigure
          TF_VAR_default_role: integrations-ci
      python:
        docker:
          - image: cimg/python:3.9.12
            auth:
              username: $DOCKER_USER
              password: $DOCKER_ACCESS_TOKEN
    commands:
      terraform_install:
        steps:
          - run:
              name: Download Terraform
              command: curl -sfSO https://releases.hashicorp.com/terraform/${TF_VERSION}/terraform_${TF_VERSION}_linux_amd64.zip
          - run:
              name: Add Terraform SHA256SUM
              command: echo "${TF_SHA256SUM} terraform_${TF_VERSION}_linux_amd64.zip" > SHA256SUMS
          - run:
              name: Check Terraform SHA256SUM
              command: sha256sum -c --status SHA256SUMS
          - run:
              name: Install Terraform
              command: sudo unzip terraform_${TF_VERSION}_linux_amd64.zip -d /bin
      install_workspace_manager:
        steps:
          - run:
              name: install workspace manager
              command: |
                wget https://github.com/TomTucka/terraform-workspace-manager/releases/download/v0.3.0/terraform-workspace-manager_Linux_x86_64.tar.gz -O $HOME/terraform-workspace-manager.tar.gz
                sudo tar -xvf $HOME/terraform-workspace-manager.tar.gz -C /usr/local/bin
                sudo chmod +x /usr/local/bin/terraform-workspace-manager
      pact_install:
        steps:
          - run:
              name: Set up ready for pact tests
              command: |
                wget https://github.com/pact-foundation/pact-ruby-standalone/releases/download/v1.82.3/pact-1.82.3-linux-x86_64.tar.gz
                tar xzf pact-1.82.3-linux-x86_64.tar.gz
              working_directory: ~/project
      login_codeartifact:
        steps:
          - run:
              name: install aws cli
              command: |
                pip3 install awscli==1.18.212 --user
          - run:
              name: login to code artifact for pip
              command: ./login_code_artifact.sh -a 288342028542 -t pip
              working_directory: ~/project/docs/ci_scripts
      cancel_redundant_builds:
        steps:
          - run:
              name: install cancel build requirements
              command: pip3 install -r requirements.txt
              working_directory: ~/project/docs/ci_scripts
          - run:
              name: cancel previous builds
              command: |
                python3 cancel_builds.py \
                --circle_project_username="${CIRCLE_PROJECT_USERNAME}" \
                --circle_project_reponame="${CIRCLE_PROJECT_REPONAME}" \
                --circle_branch="${CIRCLE_BRANCH}" \
                --circle_builds_token="${CIRCLE_BUILDS_TOKEN}" \
                --terms_to_waitfor="apply,plan,terraform,destroy" \
                --prod_job_terms="production ,integration ,pact"
              working_directory: ~/project/docs/ci_scripts

jobs:
  build_lambda:
    executor: digideps-data/python
    resource_class: small
    environment:
      AWS_REGISTRY: 311462405659.dkr.ecr.eu-west-1.amazonaws.com
      AWS_REGION: eu-west-1
      AWS_CONFIG_FILE: ~/project/aws_config
    steps:
      - checkout
      - aws-cli/install
      - digideps-data/login_codeartifact
      - digideps-data/cancel_redundant_builds
      - setup_remote_docker
      - run:
          name: Set environment variables
          command: ~/project/.circleci/set_env.sh >> $BASH_ENV
      - run:
          name: Set and show version
          command: |
            export VERSION=${TF_WORKSPACE}-${CIRCLE_SHA1:0:7}
            echo "export VERSION=${VERSION}" >> $BASH_ENV
            echo "$VERSION" >> ~/project/VERSION
            echo ${VERSION}
      - persist_to_workspace:
          root: .
          paths:
            - VERSION
      - run:
          name: build validation and unit test image
          command: docker-compose build unit-tests
      - run:
          name: run validation and unit tests
          command: |
            docker-compose -f docker-compose.yml up unit-tests
            export DOCKER_EXIT_CODE=$(docker inspect $(docker ps -a | head -2 | tail -1 | awk '{print $1}') --format='{{.State.ExitCode}}')
            if [ "$DOCKER_EXIT_CODE" = "0" ]
            then
              echo "Tests passed"
            else
              echo "Tests failed"
              exit 1
            fi
      - run:
          name: Docker login
          command: aws ecr get-login-password --region $AWS_REGION --profile integrations-ci | docker login --username AWS --password-stdin $AWS_REGISTRY
      - run:
          name: build lambda container
          command: docker-compose -f docker-compose.ci.yml build --parallel
      - run:
          name: push images to ecr
          command: docker-compose -f docker-compose.ci.yml push
      - run:
          name: install requirements for all lambda layers
          command: |
            for i in $(ls -d lambda_functions/*/ | awk -F'/' '{print $2}' | grep '^v[1-9]\+')
            do
              export LAYER_PATH=lambda_functions/"${i}"/lambda_layers/python/lib/python3.7/site-packages
              pip3 install -r lambda_functions/"${i}"/requirements/requirements.txt --target ./$LAYER_PATH/
            done
      - run:
          name: create artifact for future stages
          command: |
            chmod -R 755 ./lambda_functions
            zip -r9 /tmp/opg-data-deputy-reporting.zip .
      - persist_to_workspace:
          root: /tmp
          paths:
            - opg-data-deputy-reporting.zip
  integration_tests:
    executor: digideps-data/python
    resource_class: small
    environment:
      AWS_REGISTRY: 311462405659.dkr.ecr.eu-west-1.amazonaws.com
      AWS_REGION: eu-west-1
      AWS_CONFIG_FILE: ~/project/aws_config
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Set environment variables
          command: ~/project/.circleci/set_env.sh >> $BASH_ENV
      - run:
          name: Build integration tests container
          command: docker-compose -f docker-compose.yml build integration-tests
      - run:
          name: Run integration tests
          command: |
            docker-compose -f docker-compose.yml up integration-tests
            export DOCKER_EXIT_CODE=$(docker inspect $(docker ps -a | head -2 | tail -1 | awk '{print $1}') --format='{{.State.ExitCode}}')
            if [ "$DOCKER_EXIT_CODE" = "0" ]
            then
              echo "Tests passed"
            else
              echo "Tests failed"
              exit 1
            fi
  terraform_pre_checks:
    executor: digideps-data/python_with_tfvars
    resource_class: small
    parameters:
      tf_workspace:
        description: terraform workspace
        type: string
        default: ""
    working_directory: ~/project
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - digideps-data/terraform_install
      - run:
          name: initialize terraform - environment
          command: terraform init
          working_directory: ~/project/terraform/environment
      - run:
          name: terraform check formatting - environment
          command: terraform fmt -diff -check -recursive
          working_directory: ~/project/terraform/environment
      - run:
          name: validate terraform - environment
          command: terraform validate
          working_directory: ~/project/terraform/environment
  terraform_action:
    executor: digideps-data/python_with_tfvars
    resource_class: small
    parameters:
      tf_workspace:
        description: terraform workspace
        type: string
        default: ""
      tf_command:
        description: terraform command
        default: plan
        type: string
      mock_sirius:
        description: enables mock sirius service
        default: "0"
        type: string
      pact_tag_production:
        description: tag the pact with v<x>_production
        type: boolean
        default: false
    environment:
      WORKSPACE: << parameters.tf_workspace >>
    working_directory: ~/project
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - digideps-data/terraform_install
      - run:
          name: initialize terraform
          command: terraform init
          working_directory: ~/project/terraform/environment
      - run:
          name: Set BASH_ENV
          command: |
            ~/project/.circleci/set_env.sh >> $BASH_ENV
            if [ << parameters.mock_sirius >> == "1" ]
            then
              echo "export TF_VAR_use_mock_sirius=1" >> $BASH_ENV
            fi
      - run:
          name: Set Environment variables
          command: |
            eval $(cat $BASH_ENV)
      - run:
          name: modify openapispec
          command:
            sed -i "s/\"\${allowed_roles}\"/\${allowed_roles}/" deputy-reporting-openapi.yml
          working_directory: ~/project/lambda_functions/v2/openapi
      - run:
          name: terraform << parameters.tf_command >> - environment
          command: terraform << parameters.tf_command >>
          working_directory: ~/project/terraform/environment
      - when:
          condition: << parameters.pact_tag_production >>
          steps:
            - digideps-data/login_codeartifact
            - run:
                name: install ci requirements
                command: pip3 install -r requirements.txt
                working_directory: ~/project/pact
            - run:
                name: tag pact commit with v<x>_production
                command: |
                  echo ${API_VERSION}
                  python tag_pact.py \
                  --pact_broker_url="${PACT_BROKER_BASE_URL}" \
                  --broker_user_name="admin" \
                  --broker_secret_name="pactbroker_admin" \
                  --pacticipant="${PACT_PROVIDER}" \
                  --tag="${API_VERSION}_production" \
                  --git_commit="${GIT_COMMIT_PROVIDER}"
                working_directory: ~/project/pact
  pact_verification:
    executor: digideps-data/python
    resource_class: small
    working_directory: ~/project
    parameters:
    environment:
      MOCKING_ENV: localhost
      GIT_COMMIT_CONSUMER: << pipeline.parameters.consumerversion >>
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Set BASH_ENV
          command: ~/project/.circleci/set_env.sh >> $BASH_ENV
      - run:
          name: copy in the openapidoc
          command: |
            cd ./mock_integration_rest_api
            ./getopenapidoc
      - run:
          name: build images needed
          command: docker-compose -f docker-compose.pact.yml build mock-aws-rest-api check-pact-deployable mock-sirius
      - run:
          name: bring up mocks
          command: |
            docker-compose -f docker-compose.pact.yml up -d mock-aws-rest-api
            sleep 10
      - run:
          name: run check pact
          command: docker-compose -f docker-compose.pact.yml up check-pact-deployable
  workspace_protection:
    executor: digideps-data/python_with_tfvars
    resource_class: small
    working_directory: ~/project/environment
    parameters:
      protect_time:
        description: time to protect workspace
        type: string
        default: "24"
    environment:
      PROTECT_TIME: << parameters.protect_time >>
    steps:
      - checkout:
          path: ~/project
      - digideps-data/terraform_install
      - digideps-data/install_workspace_manager
      - run:
          name: Set environment
          command: ~/project/.circleci/set_env.sh >> $BASH_ENV
      - run:
          name: Add workspace to protected list
          command: terraform-workspace-manager -register-workspace="${TF_WORKSPACE}" -time-to-protect="${PROTECT_TIME}" -aws-account-id=288342028542 -aws-iam-role=integrations-ci
  workflow_complete:
    executor: digideps-data/python_with_tfvars
    resource_class: small
    working_directory: ~/project
    steps:
      - slack/status:
          channel: opg-integrations
          failure_message: Failure of Deputy Reporting Workflow for Branch - ${CIRCLE_BRANCH}
          success_message: Success of Deputy Reporting Workflow for Branch - ${CIRCLE_BRANCH}. Ready to Merge!

  destroy_workspaces:
    executor: digideps-data/python_with_tfvars
    resource_class: small
    working_directory: ~/project/terraform/environment
    steps:
      - checkout:
          path: ~/project
      - digideps-data/terraform_install
      - digideps-data/install_workspace_manager
      - attach_workspace: {at: ~/project}
      - run:
          name: initialise terraform
          command: terraform init
      - run:
          name: destroy unprotected workspaces
          command: |
            unset TF_WORKSPACE
            ./scripts/workspace_cleanup.sh $(terraform-workspace-manager -protected-workspaces=true -aws-account-id=288342028542 -aws-iam-role=integrations-ci)
      - slack/status:
          channel: opg-integrations
          failure_message: nightly destroy of deputy reporting workspaces has failed.
          success_message: nightly destroy of deputy reporting workspaces has succeeded.
