---
version: 2.1

workflows:
  pull_request:
    jobs:
      - build_lambda:
          name: build and artifact
          filters: {branches:{ignore:[master]}}
      - terraform_pre_checks:
          name: terraform branch preflight checks
          requires: [build and artifact]
          filters: {branches:{ignore:[master]}}
      - terraform_action:
          name: plan branch environment
          requires: [terraform branch preflight checks]
          tf_command: plan
          filters: {branches:{ignore:[master]}}
      - terraform_action:
          name: apply branch environment
          requires: [plan branch environment]
          tf_command: apply
          filters: {branches:{ignore:[master]}}
      - cleanup:
          name: approve destroy environment
          type: approval
          requires: [apply branch environment]
          filters: {branches:{ignore:[master]}}
      - terraform_action:
          name: destroy branch environment
          requires: [approve destroy environment]
          tf_command: destroy
          filters: {branches:{ignore:[master]}}
  commit_to_master:
    jobs:
      - build_lambda:
          name: build and artifact
          filters: {branches:{only:[master]}}
      - terraform_pre_checks:
         name: terraform dev preflight checks
         requires: [build and artifact]
         tf_workspace: development
         filters: {branches:{only:[master]}}
      - terraform_action:
         name: development apply
         requires: [terraform dev preflight checks]
         tf_command: apply --auto-approve
         tf_workspace: development
         filters: {branches:{only:[master]}}
#      - terraform_pre_checks:
#         name: terraform preprod preflight checks
#         requires: [development apply]
#         tf_workspace: preproduction
#         filters: {branches:{only:[master]}}
#      - terraform_action:
#         name: preprod apply
#         requires: [terraform preprod preflight checks]
#         tf_command: apply --auto-approve
#         tf_workspace: preproduction
#         filters: {branches:{only:[master]}}
#      - approve:
#         name: approve release to production
#         type: approval
#         requires: [ preprod apply ]
#         filters: {branches:{only:[master]}}
#      - terraform_pre_checks:
#         name: terraform prod preflight checks
#         requires: [approve release to production]
#         tf_workspace: production
#         filters: {branches:{only:[master]}}
#      - terraform_action:
#         name: production apply
#         requires: [terraform prod preflight checks]
#         tf_command: apply --auto-approve
#         tf_workspace: production
#         filters: {branches:{only:[master]}}

orbs:
  digideps-data:
    executors:
      python_with_tfvars:
        docker:
          - image: circleci/python:3.8.1
        environment:
          TF_VERSION: 0.12.20
          TF_SHA256SUM: 46bd906f8cb9bbb871905ecb23ae7344af8017d214d735fbb6d6c8e0feb20ff3
          TF_CLI_ARGS_plan: -input=false -lock=false
          TF_CLI_ARGS_apply: -input=false -auto-approve
          TF_CLI_ARGS_destroy: -input=false -auto-approve
          TF_CLI_ARGS_init: -input=false -upgrade=true -reconfigure
          TF_VAR_default_role: sirius-ci
      python:
        docker:
          - image: circleci/python:3.8.1
    commands:
      terraform_install:
        steps:
          - run:
              name: Download Terraform
              command: curl -sfSO https://releases.hashicorp.com/terraform/${TF_VERSION}/terraform_${TF_VERSION}_linux_amd64.zip
          - run:
              name: Add Terraform SHA256SUM
              command: echo "${TF_SHA256SUM} terraform_${TF_VERSION}_linux_amd64.zip" > SHA256SUMS
          - run:
              name: Check Terraform SHA256SUM
              command: sha256sum -c --status SHA256SUMS
          - run:
              name: Install Terraform
              command: sudo unzip terraform_${TF_VERSION}_linux_amd64.zip -d /bin

jobs:
  build_lambda:
    executor: digideps-data/python
    steps:
      - checkout
      - run:
          name: install all requirements locally
          command: |
            pip3 install -r ./requirements/dev-requirements.txt
      - run:
          name: run black - python code formatter
          command: |
            black lambda_functions
      - run:
          name: run yamllint
          command: yamllint -c ./.yamllint .
      - run:
          name: run flake8 - python PEP8 linter, complexity checker
          command: |
            flake8 lambda_functions
      - run:
          name: run unit tests (with pytest)
          command: |
            python -m pytest
      - run:
          name: install requirements for all lambda layers
          command: |
           export LAYER_PATH=lambda_layers/python/lib/python3.7/site-packages
            pip3 install -r ./requirements/requirements.txt --target ./$LAYER_PATH/
      - run:
          name: create artifact for future stages
          command: |
            chmod -R 755 ./lambda_functions
            chmod -R 755 ./lambda_layers
            zip -r9 /tmp/opg-data-deputy-reporting.zip .
      - persist_to_workspace:
          root: /tmp
          paths:
            - opg-data-deputy-reporting.zip
  terraform_pre_checks:
    executor: digideps-data/python_with_tfvars
    parameters:
      tf_workspace:
        description: terraform workspace
        type: string
        default: ""
    working_directory: ~/project
    steps:
      - attach_workspace:
          at: ~/project
      - digideps-data/terraform_install
      - run:
          name: unzip artifact
          command: unzip ./opg-data-deputy-reporting.zip -d .
      - run:
          name: initialize
          command: cd ./terraform; terraform init
      - run:
          name: terraform format check
          command: cd ./terraform; terraform fmt -diff -check -recursive
      - run:
          name: terraform validate
          command: cd ./terraform; terraform validate
  terraform_action:
    executor: digideps-data/python_with_tfvars
    parameters:
      tf_workspace:
        description: terraform workspace
        type: string
        default: ""
      tf_command:
        description: terraform command
        default: plan
        type: string
    environment:
      WORKSPACE: << parameters.tf_workspace >>
    working_directory: ~/project
    steps:
      - attach_workspace:
          at: ~/project
      - digideps-data/terraform_install
      - run:
          name: unzip artifact
          command: unzip ./opg-data-deputy-reporting.zip -d .
      - run:
          name: initialize
          command: cd ./terraform; terraform init
      - run:
          name: Set BASH_ENV
          command: ~/project/.circleci/set_env.sh >> $BASH_ENV
      - run:
          name: Set Environment variable
          command: |
            `cat $BASH_ENV | grep TF_WORKSPACE`
      - run:
          name: terraform << parameters.tf_command >>
          command: cd ./terraform; terraform << parameters.tf_command >>
