---
version: 2.1

parameters:
  run_pull_request:
    type: boolean
    default: true
  run_commit_to_master:
    type: boolean
    default: true
  run_verify_pact:
    type: boolean
    default: true
  consumerversion:
    type: string
    default: ""

workflows:
  pull_request:
    when: << pipeline.parameters.run_pull_request >>
    jobs:
      - build_lambda:
          name: build and artifact
          filters: {branches:{ignore:[master]}}
      - terraform_pre_checks:
          name: terraform branch preflight checks
          requires: [build and artifact]
          filters: {branches:{ignore:[master]}}
      - terraform_action:
          name: plan branch environment
          requires: [terraform branch preflight checks]
          tf_command: plan
          filters: {branches:{ignore:[master]}}
      - terraform_action:
          name: apply branch environment
          requires: [plan branch environment]
          tf_command: apply
          applycheck: true
          filters: {branches:{ignore:[master]}}
      - cleanup:
          name: approve destroy environment
          type: approval
          requires: [apply branch environment]
          filters: {branches:{ignore:[master]}}
      - terraform_action:
          name: destroy branch environment
          requires: [approve destroy environment]
          tf_command: destroy
          destroy_workspace: true
          filters: {branches:{ignore:[master]}}
  commit_to_master:
    when: << pipeline.parameters.run_commit_to_master >>
    jobs:
      - build_lambda:
          name: build and artifact
          filters: {branches:{only:[master]}}
      - terraform_pre_checks:
          name: terraform dev preflight checks
          requires: [build and artifact]
          tf_workspace: development
          filters: {branches:{only:[master]}}
      - terraform_action:
          name: development apply
          requires: [terraform dev preflight checks]
          tf_command: apply --auto-approve
          tf_workspace: development
          applycheck: true
          filters: {branches:{only:[master]}}
      - terraform_pre_checks:
         name: terraform preprod preflight checks
         requires: [build and artifact]
         tf_workspace: preproduction
         filters: {branches:{only:[master]}}
      - terraform_action:
         name: preprod apply
         requires: [terraform preprod preflight checks, development apply]
         tf_command: apply --auto-approve
         tf_workspace: preproduction
         applycheck: true
         filters: {branches:{only:[master]}}
      - approve:
         name: approve release to production
         type: approval
         requires: [preprod apply]
         filters: {branches:{only:[master]}}
      - terraform_pre_checks:
         name: terraform production preflight checks
         requires: [approve release to production]
         tf_workspace: production
         filters: {branches:{only:[master]}}
      - terraform_action:
         name: production apply
         requires: [terraform production preflight checks]
         tf_command: apply --auto-approve
         tf_workspace: production
         applycheck: true
         pact_tag_production: true
         filters: {branches:{only:[master]}}
  verify_pact:
    when: << pipeline.parameters.run_verify_pact >>
    jobs:
      - pact_verification:
          name: verify the latest pact
orbs:
  dockerhub_helper:
    orbs:
      docker: circleci/docker@1.4.0
    commands:
      dockerhub_login:
        steps:
          - docker/install-docker-credential-helper
          - docker/check:
              docker-password: DOCKER_ACCESS_TOKEN
              docker-username: DOCKER_USER
  digideps-data:
    executors:
      python_with_tfvars:
        docker:
          - image: circleci/python:3.8
            auth:
              username: $DOCKER_USER
              password: $DOCKER_ACCESS_TOKEN
        resource_class: small
        environment:
          TF_VERSION: 0.13.5
          TF_SHA256SUM: f7b7a7b1bfbf5d78151cfe3d1d463140b5fd6a354e71a7de2b5644e652ca5147
          TF_CLI_ARGS_plan: -input=false -lock=false
          TF_CLI_ARGS_apply: -input=false -auto-approve
          TF_CLI_ARGS_destroy: -input=false -auto-approve
          TF_CLI_ARGS_init: -input=false -upgrade=true -reconfigure
          TF_VAR_default_role: sirius-ci
      python:
        docker:
          - image: circleci/python:3
            auth:
              username: $DOCKER_USER
              password: $DOCKER_ACCESS_TOKEN
    commands:
      terraform_install:
        steps:
          - run:
              name: Download Terraform
              command: curl -sfSO https://releases.hashicorp.com/terraform/${TF_VERSION}/terraform_${TF_VERSION}_linux_amd64.zip
          - run:
              name: Add Terraform SHA256SUM
              command: echo "${TF_SHA256SUM} terraform_${TF_VERSION}_linux_amd64.zip" > SHA256SUMS
          - run:
              name: Check Terraform SHA256SUM
              command: sha256sum -c --status SHA256SUMS
          - run:
              name: Install Terraform
              command: sudo unzip terraform_${TF_VERSION}_linux_amd64.zip -d /bin
      pact_install:
        steps:
          - run:
              name: Set up ready for pact tests
              command: |
                wget https://github.com/pact-foundation/pact-ruby-standalone/releases/download/v1.82.3/pact-1.82.3-linux-x86_64.tar.gz
                tar xzf pact-1.82.3-linux-x86_64.tar.gz
              working_directory: ~/project
      python_requirements:
        steps:
          - run:
              name: install all requirements locally
              command: |
                for i in $(ls -d lambda_functions/*/ | awk -F'/' '{print $2}'  | grep '^v[1-9]\+')
                do
                  pip3 install -r ./lambda_functions/"${i}"/requirements/dev-requirements.txt
                done
      login_codeartifact:
        steps:
          - run:
              name: install aws cli
              command: |
                pip3 install awscli==1.18.212 --user
          - run:
              name: login to code artifact for pip
              command: ./login_code_artifact.sh -a 288342028542 -t pip
              working_directory: ~/project/docs/ci_scripts
      cancel_redundant_builds:
        steps:
          - run:
              name: install cancel build requirements
              command: pip3 install -r requirements.txt
              working_directory: ~/project/docs/ci_scripts
          - run:
              name: cancel previous builds
              command: |
                python3 cancel_builds.py \
                --circle_project_username="${CIRCLE_PROJECT_USERNAME}" \
                --circle_project_reponame="${CIRCLE_PROJECT_REPONAME}" \
                --circle_branch="${CIRCLE_BRANCH}" \
                --circle_builds_token="${CIRCLE_BUILDS_TOKEN}" \
                --terms_to_waitfor="apply,plan,terraform,destroy" \
                --prod_job_terms="production ,integration ,pact"
              working_directory: ~/project/docs/ci_scripts
jobs:
  build_lambda:
    executor: digideps-data/python
    resource_class: small
    steps:
      - checkout
      - digideps-data/login_codeartifact
      - digideps-data/cancel_redundant_builds
      - digideps-data/python_requirements
      - run:
          name: list all pacakges
          command: pip freeze
      - run:
          name: run black - python code formatter
          command: |
            black lambda_functions
      - run:
          name: setup environment
          command: ./.circleci/setup.sh
#      - run:
#          name: run yamllint
#          command: yamllint -c ./.yamllint .
      - run:
          name: run flake8 - python PEP8 linter, complexity checker
          command: |
            flake8 lambda_functions
      - run:
          name: run unit tests (with pytest)
          command: python -m pytest lambda_functions
      - run:
          name: intgration tests
          command: |
            export COMMIT_MESSAGE="\"$(git log --format=oneline -n 1 $CIRCLE_SHA1)\""
            if [[ "$COMMIT_MESSAGE" == *"[int-test]"* ]]
              then
              python -m pytest
            else
              echo "Integration tests not chosen to run"
            fi
          working_directory: ~/integration_tests/v2
      - run:
          name: install requirements for all lambda layers
          command: |
            for i in $(ls -d lambda_functions/*/ | awk -F'/' '{print $2}' | grep '^v[1-9]\+')
            do
              export LAYER_PATH=lambda_functions/"${i}"/lambda_layers/python/lib/python3.7/site-packages
              pip3 install -r lambda_functions/"${i}"/requirements/requirements.txt --target ./$LAYER_PATH/
            done
      - run:
          name: create artifact for future stages
          command: |
            chmod -R 755 ./lambda_functions
            zip -r9 /tmp/opg-data-deputy-reporting.zip .
      - persist_to_workspace:
          root: /tmp
          paths:
            - opg-data-deputy-reporting.zip
  terraform_pre_checks:
    executor: digideps-data/python_with_tfvars
    resource_class: small
    parameters:
      tf_workspace:
        description: terraform workspace
        type: string
        default: ""
    working_directory: ~/project
    steps:
      - attach_workspace:
          at: ~/project
      - digideps-data/terraform_install
      - run:
          name: unzip artifact
          command: unzip ./opg-data-deputy-reporting.zip -d .
      - run:
          name: initialize terraform - environment
          command: terraform init
          working_directory: ~/project/terraform/environment
      - run:
          name: terraform check formatting - environment
          command: terraform fmt -diff -check -recursive
          working_directory: ~/project/terraform/environment
      - run:
          name: validate terraform - environment
          command: terraform validate
          working_directory: ~/project/terraform/environment
  terraform_action:
    executor: digideps-data/python_with_tfvars
    resource_class: small
    parameters:
      tf_workspace:
        description: terraform workspace
        type: string
        default: ""
      tf_command:
        description: terraform command
        default: plan
        type: string
      applycheck:
        description: workaround for rest api provider
        type: boolean
        default: false
      destroy_workspace:
        description: whether to destroy the empty workspace
        type: boolean
        default: false
      pact_tag_production:
        description: tag the pact with v<x>_production
        type: boolean
        default: false
    environment:
      WORKSPACE: << parameters.tf_workspace >>
    working_directory: ~/project
    steps:
      - attach_workspace:
          at: ~/project
      - digideps-data/terraform_install
      - run:
          name: unzip artifact
          command: unzip ./opg-data-deputy-reporting.zip -d .
      - run:
          name: initialize terraform - environment
          command: terraform init
          working_directory: ~/project/terraform/environment
      - run:
          name: Set BASH_ENV
          command: ~/project/.circleci/set_env.sh >> $BASH_ENV
      - run:
          name: Set Environment variables
          command: |
            eval $(cat $BASH_ENV)
      - run:
          name: terraform << parameters.tf_command >> - environment
          command: terraform << parameters.tf_command >>
          working_directory: ~/project/terraform/environment
      # https://github.com/terraform-providers/terraform-provider-aws/issues/5364
      - when:
          condition: << parameters.applycheck >>
          steps:
            - run:
                name: conditionally reapply if gateway policy is missing
                command: |
                  cd ./terraform/environment
                  if [ `terraform output policy | wc -m` -gt 1 ]
                  then echo "policy attached, doing nothing"
                  else terraform << parameters.tf_command >>
                  fi
      - when:
          condition: << parameters.destroy_workspace >>
          steps:
            - run:
                name: destroy the workspace to clear up
                command: |
                  export WORKSPACE_TO_DELETE="${TF_WORKSPACE}"
                  echo "Switching workspace to default so we can remove branch workspace"
                  export TF_WORKSPACE=default
                  terraform workspace delete "${WORKSPACE_TO_DELETE}" || echo "no workspace to remove"
      - when:
          condition: << parameters.pact_tag_production >>
          steps:
            - digideps-data/login_codeartifact
            - run:
                name: install ci requirements
                command: pip3 install -r requirements.txt
                working_directory: ~/project/pact
            - run:
                name: tag pact commit with v<x>_production
                command: |
                  echo ${API_VERSION}
                  python tag_pact.py \
                  --pact_broker_url="${PACT_BROKER_BASE_URL}" \
                  --broker_user_name="admin" \
                  --broker_secret_name="pactbroker_admin" \
                  --pacticipant="${PACT_PROVIDER}" \
                  --tag="${API_VERSION}_production" \
                  --git_commit="${GIT_COMMIT_PROVIDER}"
                working_directory: ~/project/pact
  pact_verification:
    executor: digideps-data/python_with_tfvars
    resource_class: small
    working_directory: ~/project
    parameters:
    environment:
      MOCKING_ENV: localhost
      GIT_COMMIT_CONSUMER: << pipeline.parameters.consumerversion >>
    steps:
      - checkout
      - run:
          name: Set BASH_ENV
          command: ~/project/.circleci/set_env.sh >> $BASH_ENV
      - run:
          name: copy in the openapidoc
          command: |
            cd ./mock_integration_rest_api
            ./getopenapidoc
      - run:
          name: install requirements mock rest api
          command: |
            cd ./mock_integration_rest_api
            pip3 install -r requirements.txt
      - run:
          name: spin up mock rest api
          command: |
            export PYTHONPATH="${PYTHONPATH}:/home/circleci/project"
            cd ./mock_integration_rest_api
            python3 app.py
          background: true
      - run:
          name: check mock rest api started
          command: |
            sleep 3
            if [ `netstat -tulpn | grep 4343 | wc -l` -gt 0 ]
            then
            echo "Digideps Rest API Service Started Correctly"
            else
            echo "Digideps Rest API Service Not Started"
            fi
      - run:
          name: install requirements mock sirius backend
          command: |
            cd ./mock_sirius_backend
            pip3 install -r ./requirements.txt
      - run:
          name: spin up mock sirius backend
          command: |
            export PYTHONPATH="${PYTHONPATH}:/home/circleci/project"
            cd ./mock_sirius_backend
            python3 app.py
          background: true
      - run:
          name: check mock sirius backend started
          command: |
            sleep 3
            if [ `netstat -tulpn | grep 5001 | wc -l` -gt 0 ]
            then
            echo "Sirius Backend Service Started Correctly"
            else
            echo "Sirius Backend Service Not Started"
            fi
      - digideps-data/pact_install
      - digideps-data/login_codeartifact
      - run:
          name: install ci requirements
          command: pip3 install -r requirements.txt
          working_directory: ~/project/pact
      - run:
          name: verify pact
          command: |
            echo ${API_VERSION}
            python check_pact_deployable.py \
            --provider_base_url="http://localhost:4343" \
            --pact_broker_url="${PACT_BROKER_BASE_URL}" \
            --broker_user_name="admin" \
            --broker_secret_name="pactbroker_admin" \
            --consumer_pacticipant="${PACT_CONSUMER}" \
            --provider_pacticipant="${PACT_PROVIDER}" \
            --api_version="${API_VERSION}" \
            --git_commit_consumer="${GIT_COMMIT_CONSUMER}" \
            --git_commit_provider="${GIT_COMMIT_PROVIDER}"
          working_directory: ~/project/pact
