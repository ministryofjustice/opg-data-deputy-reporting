---
version: 2.1

parameters:
  run_pull_request:
    type: boolean
    default: false
  run_commit_to_master:
    type: boolean
    default: false
  run_verify_pact:
    type: boolean
    default: true
  consumerversion:
    type: string
    default: ""

workflows:
  pull_request:
    when: << pipeline.parameters.run_pull_request >>
    jobs:
      - build_lambda:
          name: build and artifact
          filters: {branches:{ignore:[master]}}
      - terraform_pre_checks:
          name: terraform branch preflight checks
          requires: [build and artifact]
          filters: {branches:{ignore:[master]}}
      - terraform_action:
          name: plan branch environment
          requires: [terraform branch preflight checks]
          tf_command: plan
          filters: {branches:{ignore:[master]}}
      - terraform_action:
          name: apply branch environment
          requires: [plan branch environment]
          tf_command: apply
          applycheck: true
          filters: {branches:{ignore:[master]}}
      - cleanup:
          name: approve destroy environment
          type: approval
          requires: [apply branch environment]
          filters: {branches:{ignore:[master]}}
      - terraform_action:
          name: destroy branch environment
          requires: [approve destroy environment]
          tf_command: destroy
          filters: {branches:{ignore:[master]}}
  commit_to_master:
    when: << pipeline.parameters.run_commit_to_master >>
    jobs:
      - build_lambda:
          name: build and artifact
          filters: {branches:{only:[master]}}
      - terraform_pre_checks:
          name: terraform dev preflight checks
          requires: [build and artifact]
          tf_workspace: development
          filters: {branches:{only:[master]}}
      - terraform_action:
          name: development apply
          requires: [terraform dev preflight checks]
          tf_command: apply --auto-approve
          tf_workspace: development
          account: "679638075911"
          applycheck: true
          run_account: true
          filters: {branches:{only:[master]}}
#      - terraform_pre_checks:
#         name: terraform preprod preflight checks
#         requires: [development apply]
#         tf_workspace: preproduction
#         filters: {branches:{only:[master]}}
#      - terraform_action:
#         name: preprod apply
#         requires: [terraform preprod preflight checks]
#         tf_command: apply --auto-approve
#         tf_workspace: preproduction
#         filters: {branches:{only:[master]}}
#      - approve:
#         name: approve release to production
#         type: approval
#         requires: [ preprod apply ]
#         filters: {branches:{only:[master]}}
#      - terraform_pre_checks:
#         name: terraform prod preflight checks
#         requires: [approve release to production]
#         tf_workspace: production
#         filters: {branches:{only:[master]}}
#      - terraform_action:
#         name: production apply
#         requires: [terraform prod preflight checks]
#         tf_command: apply --auto-approve
#         tf_workspace: production
#         filters: {branches:{only:[master]}}
  verify_pact:
    when: << pipeline.parameters.run_verify_pact >>
    jobs:
      - pact_verification:
          name: verify the latest pact
          account: "679638075911"

orbs:
  digideps-data:
    executors:
      python_with_tfvars:
        docker:
          - image: circleci/python:3.8.1
        environment:
          TF_VERSION: 0.12.23
          TF_SHA256SUM: 78fd53c0fffd657ee0ab5decac604b0dea2e6c0d4199a9f27db53f081d831a45
          TF_CLI_ARGS_plan: -input=false -lock=false
          TF_CLI_ARGS_apply: -input=false -auto-approve
          TF_CLI_ARGS_destroy: -input=false -auto-approve
          TF_CLI_ARGS_init: -input=false -upgrade=true -reconfigure
          TF_VAR_default_role: sirius-ci
      python:
        docker:
          - image: circleci/python:3.8.1
    commands:
      terraform_install:
        steps:
          - run:
              name: Download Terraform
              command: curl -sfSO https://releases.hashicorp.com/terraform/${TF_VERSION}/terraform_${TF_VERSION}_linux_amd64.zip
          - run:
              name: Add Terraform SHA256SUM
              command: echo "${TF_SHA256SUM} terraform_${TF_VERSION}_linux_amd64.zip" > SHA256SUMS
          - run:
              name: Check Terraform SHA256SUM
              command: sha256sum -c --status SHA256SUMS
          - run:
              name: Install Terraform
              command: sudo unzip terraform_${TF_VERSION}_linux_amd64.zip -d /bin
      aws_cli_install:
        steps:
          - run:
              name: install aws cli
              command: |
                pip3 install awscli --upgrade --user
                aws --version

jobs:
  build_lambda:
    executor: digideps-data/python
    steps:
      - checkout
      - run:
          name: install all requirements locally
          command: |
            pip3 install -r ./requirements/dev-requirements.txt
      - run:
          name: run black - python code formatter
          command: |
            black lambda_functions
      - run:
          name: run yamllint
          command: yamllint -c ./.yamllint .
      - run:
          name: run flake8 - python PEP8 linter, complexity checker
          command: |
            flake8 lambda_functions
      - run:
          name: run unit tests (with pytest)
          command: |
            python -m pytest
      - run:
          name: install requirements for all lambda layers
          command: |
            export LAYER_PATH=lambda_layers/python/lib/python3.7/site-packages
            pip3 install -r ./requirements/requirements.txt --target ./$LAYER_PATH/
      - run:
          name: create artifact for future stages
          command: |
            chmod -R 755 ./lambda_functions
            chmod -R 755 ./lambda_layers
            zip -r9 /tmp/opg-data-deputy-reporting.zip .
      - persist_to_workspace:
          root: /tmp
          paths:
            - opg-data-deputy-reporting.zip
  terraform_pre_checks:
    executor: digideps-data/python_with_tfvars
    parameters:
      tf_workspace:
        description: terraform workspace
        type: string
        default: ""
      tf_stage:
        description: terraform workspace
        type: string
        default: "1_0_0"
    working_directory: ~/project
    steps:
      - attach_workspace:
          at: ~/project
      - digideps-data/terraform_install
      - run:
          name: unzip artifact
          command: unzip ./opg-data-deputy-reporting.zip -d .
      - run:
          name: initialize
          command: cd ./terraform/environment; terraform init
      - run:
          name: terraform format check
          command: cd ./terraform/environment; terraform fmt -diff -check -recursive
      - run:
          name: terraform validate
          command: cd ./terraform/environment; terraform validate
  terraform_action:
    executor: digideps-data/python_with_tfvars
    parameters:
      account:
        description: Account
        type: string
        default: "679638075911"
      tf_workspace:
        description: terraform workspace
        type: string
        default: ""
      tf_command:
        description: terraform command
        default: plan
        type: string
      tf_stage:
        description: provider stage
        type: string
        default: "1_0_0"
      applycheck:
        description: workaround for rest api provider
        type: boolean
        default: false
      run_account:
        description: whether to run account config in terraform
        type: boolean
        default: false
    environment:
      WORKSPACE: << parameters.tf_workspace >>
      TF_VAR_stage: << parameters.tf_stage >>
      ACCOUNT: << parameters.account >>
    working_directory: ~/project
    steps:
      - attach_workspace:
          at: ~/project
      - digideps-data/terraform_install
      - digideps-data/aws_cli_install
      - run:
          name: unzip artifact
          command: unzip ./opg-data-deputy-reporting.zip -d .
      - run:
          name: initialize
          command: cd ./terraform/environment; terraform init
      - run:
          name: Set BASH_ENV
          command: ~/project/.circleci/set_env.sh >> $BASH_ENV
      - run:
          name: Set Environment variables
          command: |
            eval `cat $BASH_ENV`
      - run:
          name: terraform << parameters.tf_command >>
          command: cd ./terraform/environment; terraform << parameters.tf_command >>
      # https://github.com/terraform-providers/terraform-provider-aws/issues/5364
      - when:
          condition: << parameters.applycheck >>
          steps:
            - run:
                name: conditionally reapply if gateway policy is missing
                command: |
                  cd ./terraform/environment
                  if [ `terraform output policy | wc -m` -gt 1 ]
                  then echo "policy attached, doing nothing"
                  else terraform << parameters.tf_command >>
                  fi
      - when:
          condition: << parameters.run_account >>
          steps:
            - run:
                name: apply account if aginst non branch based env
                command: |
                  cd ./terraform/account
                  terraform << parameters.tf_command >>
      - run:
          name: tag the latest pact version with env
          command: |
            if [ "$TF_WORKSPACE" != "development" ] && [ "$TF_WORKSPACE" != "preproduction" ] && [ "$TF_WORKSPACE" != "production" ]
            then
            echo "no tags appplied as on branch"
            else
            echo "applying tag on version ${$TF_VAR_stage}"
            curl -v -X PUT -u $PACT_BROKER_HTTP_AUTH_USER:$PACT_BROKER_HTTP_AUTH_PASS -H "Content-Type: application/json" \
            https://dev-pact-broker.api.opg.service.justice.gov.uk/pacticipants/OPG%20Data/versions/$TF_VAR_stage/tags/$TF_WORKSPACE
            fi
  pact_verification:
    executor: digideps-data/python_with_tfvars
    working_directory: ~/project
    parameters:
      account:
        description: Account
        type: string
        default: "679638075911"
    environment:
      MOCKING_ENV: localhost
      ACCOUNT: << parameters.account >>
      CONSUMER_VER: << pipeline.parameters.consumerversion >>
    steps:
      - checkout
      - digideps-data/aws_cli_install
      - run:
          name: Set BASH_ENV
          command: ~/project/.circleci/set_env.sh >> $BASH_ENV
      - run:
          name: copy in the openapidoc
          command: |
            cd ./mock_sirius
            ./getopenapidoc
      - run:
          name: install requirements mock sirius
          command: |
            cd ./mock_sirius
            pip3 install -r requirements.txt
      - run:
          name: spin up mock sirius
          command: |
            cd ./mock_sirius
            python3 app.py
          background: true
      - run:
          name: check mock sirius started
          command: |
            sleep 3
            if [ `netstat -tulpn | grep 4343 | wc -l` -gt 0 ]
            then
            echo "Sirius API Service Started Correctly"
            else
            echo "Sirius API Service Not Started"
            fi
      - run:
          name: install requirements mock state
          command: |
            cd ./mock_state
            pip3 install -r ./requirements.txt
      - run:
          name: spin up mock state
          command: |
            cd ./mock_state
            python3 app.py
          background: true
      - run:
          name: check mock state started
          command: |
            sleep 3
            if [ `netstat -tulpn | grep 5001 | wc -l` -gt 0 ]
            then
            echo "State Service Started Correctly"
            else
            echo "State Service Not Started"
            fi
      - run:
          name: pip install pact-python
          command: |
            pip install pact-python
            pact-verifier --help
      - run:
          name: Install pact packages
          command: |
            wget https://github.com/pact-foundation/pact-ruby-standalone/releases/download/v1.81.0/pact-1.81.0-linux-x86_64.tar.gz
            tar xzf pact-1.81.0-linux-x86_64.tar.gz
      - run:
          name: run a command to get version which is git sha
          command: |
            export LATEST=`curl -u $PACT_BROKER_HTTP_AUTH_USER:$PACT_BROKER_HTTP_AUTH_PASS \
            -X GET https://${PACT_BROKER_BASE_URL}/pacts/provider/OPG%20Data/consumer/Complete%20the%20deputy%20report/latest \
            | jq ._links | jq '.["pb:consumer-version"]' | jq .name | sed 's/"//g'`

            if [ "$CONSUMER_VER" == "" ]
            then
            export CONSUMER_VER=$LATEST
            fi

            ~/project/.circleci/pact_verifier.sh
            ~/project/.circleci/can_i_deploy.sh

            export FULL_COMMIT_SHA=`curl -X GET -u $GITHUB_STATUS_CREDS \
            https://api.github.com/repos/ministryofjustice/opg-digideps/commits/$CONSUMER_VER | jq -r .sha`

            if [ "$CAN_DEPLOY" == "1" ]
            then
            echo "Github Status Updated - Verified"
            curl -X POST \
            -H "Content-Type: application/json" \
            -u $GITHUB_STATUS_CREDS \
            -d '{"state":"success","target_url":"https://$PACT_BROKER_BASE_URL/","description":"Our build was verified!","context":"pactbroker"}' \
            https://api.github.com/repos/ministryofjustice/opg-digideps/statuses/$FULL_COMMIT_SHA >> /dev/null
            else
            echo "Github Status Updated - Failed"
            curl -X POST \
            -H "Content-Type: application/json" \
            -u $GITHUB_STATUS_CREDS \
            -d '{"state":"failed","target_url":"https://$PACT_BROKER_BASE_URL/","description":"Our build failed verification!","context":"pactbroker"}' \
            https://api.github.com/repos/ministryofjustice/opg-digideps/statuses/$FULL_COMMIT_SHA >> /dev/null
            fi
